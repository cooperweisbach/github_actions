name: CD2
on:
  workflow_run:
    workflows: [CI]
    types: 
      - completed
      
jobs:
  execute:
    if:  ${{ github.event.workflow_run.conclusion == 'failure' || github.event.workflow_run.conclusion == 'cancelled' }}
    runs-on: ubuntu-latest
    steps: 
      - name: get_job_steps_conclusions
        id: get_job_steps_conclusions
        uses: actions/github-script@v6
        with:
          script: |
            let workflowRunJobs = await github.rest.actions.listJobsForWorkflowRunAttempt({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
              attempt_number: context.payload.workflow_run.run_attempt
            });
            for(let jobStep of workflowRunJobs.data.jobs[0].steps){
              console.log(jobStep);
              let stepConclusion = jobStep.conclusion;
              console.log(stepConclusion); 
              if(stepConclusion === 'cancelled' || stepConclusion === 'failure'){
                core.setOutput('stepsOutput', jobStep.name);
                core.setOutput('stepConclusion', stepConclusion);
                break;
              }
            }
            console.log("Getting artifacts");
     
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });

            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              console.log(artifact);
              return artifact.name == "artifact_inputs"
            })[0];

            let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/artifact_inputs.zip`, Buffer.from(download.data));
            
      - name: unzip_artifact
        run: |
          unzip ./artifact_inputs.zip
          
      - name: parse_artifact
        id: parse_artifact
        uses: actions/github-script@v6
        with:
          script: |
             let fs = require('fs');
             core.setOutput('inputs', String(fs.readFileSync('./artifact_inputs')));
            
      - name: action_based_on_faulty_step
        run: |
           updatedEnv=$( steps.parse_artifact.outputs.inputs | grep 'env' | awk -F ':' '{print $2}' )
           applications=$( steps.parse_artifact.outputs.inputs | grep 'apps' | awk -F ':' '{print $2}' )
           chmod 700 bin/action_based_on_faulty_step.sh
           bin/action_based_on_faulty_step.sh -s ${steps.get_job_steps_conclusions.outputs.stepsOutput} -c ${steps.get_job_steps_conclusions.outputs.stepConclusion} -e "$updatedEnv" -a "$applications"
        
      
