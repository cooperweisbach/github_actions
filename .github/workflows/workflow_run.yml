name: CD
on:
  workflow_run:
    workflows: [CI]
    types: 
      - completed
      
jobs:
  run_on_failure:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Get Artifacts'
        uses: actions/github-script@v6
        with:
          script: | 
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "log_steps"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/log_steps.zip`, Buffer.from(download.data));
      - name: 'Unzip artifact'
        run: unzip log_steps.zip
        
      - name: 'Go through logs'
        uses: actions/github-script@v6
        with: 
          script: | 
            let fs = require('fs');
            let logs = fs.readFileSync('./log_steps');
            console.log(logs);
            console.log("Failure");
      - name: delete-artifact
        uses: actions/github-script@v6
        with:
          script: | 
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "log_steps"
            })[0];
            let deleted = await github.rest.actions.deleteArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id
            });
            
  run_on_success:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Get Artifacts'
        uses: actions/github-script@v6
        with:
          script: | 
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "log_steps"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/log_steps.zip`, Buffer.from(download.data));
      - name: 'Unzip artifact'
        run: unzip log_steps.zip
        
      - name: 'Go through logs'
        uses: actions/github-script@v6
        with: 
          script: | 
            let fs = require('fs');
            let logs = fs.readFileSync('./log_steps');
            console.log(logs);
            console.log("Success");   
      - name: delete-artifact
        uses: actions/github-script@v6
        with:
         script: | 
             let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
             });
             let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
               return artifact.name == "log_steps"
             })[0];
             let deleted = await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchArtifact.id
             });
